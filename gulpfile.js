var SASS_ALL = 'app/src/all.scss';
var TS_SOURCE = ['app/src/**/*.ts', '!app/src/**/*.d.ts'];
var JS_SOURCE = ['app/src/**/*.js', '!app/src/all.*'];
var ICONS = 'app/src/shared/sprites/icons/*.*';

var gulp = require('gulp');
var gulpif = require('gulp-if');
var spritesmith = require('gulp.spritesmith');
var browserSync = require('browser-sync').create();

// Creates app/all.scss
gulp.task('sass-gen', function () {
    var glob = require('glob');
    var imports = [
        '// ' + new Date().toISOString(),
        '// Generated by sass-gen task in gulpfile.js.  Do not edit.',
        '@import "shared/scss/elements.scss";',
        '@import "shared/scss/icons.scss";'
    ];

    return glob('app/src/modules/**/*.scss', { ignore: SASS_ALL }, function (err, files) {
        for (var i = 0; i < files.length; i++) {
            imports.push('@import "' + files[i].substring(8) + '";');
        }

        var fs = require('fs');
        fs.writeFileSync(SASS_ALL, imports.join('\r\n'));
    });
});

// Creates all.css and all.min.css
gulp.task('sass', ['sass-gen'], function () {
    var sass = require('gulp-sass');
    var cssmin = require('gulp-cssmin');
    var header = require('gulp-header');
    var rename = require('gulp-rename');
    var banner = '/* Generated at ' + new Date().toISOString() + '.  Do not edit. */\r\n';
    return gulp.src(SASS_ALL)
        .pipe(sass())
        .pipe(header(banner))
        .pipe(gulp.dest('app/dist'))
        .pipe(cssmin())
        .pipe(rename({ suffix: '.min' }))
        .pipe(header(banner))
        .pipe(gulp.dest('app/dist'));
});

gulp.task('ts-lint', function () {
    var tslint = require('gulp-tslint');
    return gulp.src(TS_SOURCE)
        .pipe(tslint({ formatter: 'verbose' }))
        .pipe(tslint.report());
});

gulp.task('ts-transpile', function () {
    var ts = require('gulp-typescript');
    return gulp.src(TS_SOURCE, { base: '.' })
        .pipe(ts({ declaration: true }))
        .pipe(gulp.dest('.'));
});

gulp.task('js-concat', function () {
    var concat = require('gulp-concat');
    return gulp.src(JS_SOURCE)
        .pipe(concat('all.js'))
        .pipe(gulp.dest('app/dist'));
});

gulp.task('js-uglify', ['js-concat'], function (cb) {
    var pump = require('pump');
    var rename = require('gulp-rename');
    var uglify = require('gulp-uglify');
    pump([
        gulp.src('app/dist/all.js'),
        uglify(),
        rename({ suffix: '.min' }),
        gulp.dest('app/dist')
    ], cb);
});

gulp.task('icons', function () {
    return gulp.src(ICONS).pipe(
        spritesmith({
            imgName: 'icons.png',
            cssName: 'icons-generated.scss',
            imgPath: 'img/icons.png' // For Sass, e.g. background-image: url(img/icons.png)
        }))
        .pipe(gulpif('*.png', gulp.dest('app/dist/img/')))
        .pipe(gulpif('*.scss', gulp.dest('app/src/shared/scss/')));
});

gulp.task('browserSync', function () {
    browserSync.init({
        server: { baseDir: './', index: 'index.html' }
    });
});

// Create the watch, ensuring the browserSync and sass tasks are complete
gulp.task('default', ['browserSync', 'sass'], function () {
    gulp.watch(['app/src/**/*.scss', '!app/src/all.scss'], ['sass']);
    gulp.watch(TS_SOURCE, ['ts-lint', 'ts-transpile']);
    gulp.watch(JS_SOURCE, ['js-uglify']);
    gulp.watch(['app/dist/all.min.js', '*.html'], browserSync.reload);
    gulp.watch('app/dist/all.min.css', function () {
        gulp.src('app/dist/all.min.css').pipe(browserSync.stream());
    });
});
