var SASS_ALL = 'app/all.scss';
//var JS_ALL = 'app/all.js';
//var TS_PATTERN = 'app/modules/**/*.ts';

var gulp = require('gulp');
var browserSync = require('browser-sync').create();

// Generates the Sass import file used to create all.css
gulp.task('sass-gen', function () {
    var glob = require('glob');
    var imports = [
        '// ' + new Date().toISOString(),
        '// Generated by sass-gen task in gulpfile.js.  Do not edit.',
        '@import "app/shared/scss/elements.scss";\r\n'
    ];

    return glob('app/modules/**/*.scss', { ignore: SASS_ALL }, function (err, files) {
        for (var i = 0; i < files.length; i++) {
            imports.push('@import "' + files[i] + '";');
        }

        var fs = require('fs');
        fs.writeFileSync(SASS_ALL, imports.join('\r\n'));
    });
});

// Creates all.css and all.min.css
gulp.task('sass', ['sass-gen'], function () {
    var sass = require('gulp-sass');
    var cssmin = require('gulp-cssmin');
    var header = require('gulp-header');
    var rename = require('gulp-rename');
    var banner = '/* Generated at ' + new Date().toISOString() + '.  Do not edit. */\r\n';
    return gulp.src(SASS_ALL)
        .pipe(sass())
        .pipe(header(banner))
        .pipe(gulp.dest('app'))
        .pipe(cssmin())
        .pipe(rename({ suffix: '.min' }))
        .pipe(header(banner))
        .pipe(gulp.dest('app'));
});

// Lint all TypeScript
gulp.task('tslint', function () {
    var tslint = require('gulp-tslint');
    return gulp.src('app/**/*.ts')
        .pipe(tslint({
            formatter: 'verbose'
        }))
        .pipe(tslint.report());
});

// Process all TypeScript
gulp.task('typescript', function (cb) {
    // In-place transpiling
    var ts = require('gulp-typescript');
    gulp.src(['app/**/*.ts', '!app/**/*.d.ts'], { base: '.' })
        .pipe(ts({ declaration: true }))
        .pipe(gulp.dest('.'));

    // Concat JavaScript
    var concat = require('gulp-concat');
    gulp.src(['app/**/*.js', '!app/all.js'])
        .pipe(concat('all.js'))
        .pipe(gulp.dest('app/'));

    // Minify combined JavaScript
    var pump = require('pump');
    var rename = require('gulp-rename');
    var uglify = require('gulp-uglify');
    pump([
        gulp.src('app/all.js'),
        uglify(),
        rename({ suffix: '.min' }),
        gulp.dest('app')
    ], cb);
});

// Create the watch, ensuring the browserSync and sass tasks are complete
gulp.task('watch', ['browserSync', 'sass'], function () {
    gulp.watch(['app/**/*.scss', '!app/all.scss'], ['sass']);
    gulp.watch('app/**/*.ts', ['tslint', 'typescript']);
    gulp.watch('*.html', browserSync.reload);
    gulp.watch('app/all.min.css', function () { browserSync.reload({ stream: true }) });
    gulp.watch('app/all.min.js', browserSync.reload); 
});

gulp.task('browserSync', function() {
    browserSync.init({
        server: { baseDir: '' }
    });
});